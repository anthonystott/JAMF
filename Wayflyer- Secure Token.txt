#!/bin/sh
# This script is intended to be used with JAMF Self Service. It will enable SecureToken for the currently logged in user account
# and either add it to the list of to FileVault enabled users or enable FileVault using a Personal Recovery Key.

# Your policy must include script parameters for a SecureToken enabled administrator username and password. For more information
# on using script parameters, please see https://www.jamf.com/jamf-nation/articles/146/script-parameters.

# v1.2 - added debugging trace messages to confirm progress of script and confirm variables are being correctly passed - by Amos Deane - 13 Sep 2018
# v1.3 - corrected userName1
# v1.3.1 - added password entry timeout, verify user password, invalid prompt, success prompt, recon at end, commented out remove user

adminUser="$4"
adminPassword="$5"
userName1="$3"
userName2="$6"

# Uses AppleScript to prompt the currently logged in user for their account password.
userPassword1=$(/usr/bin/osascript <<EOT
tell application "System Events"
activate
with timeout of 300 seconds
display dialog "Please enter your login password to enable FileVault:" default answer "" buttons {"Continue"} default button 1 with hidden answer
if button returned of result is "Continue" then
set pwd to text returned of result
return pwd
end if
end timeout
end tell
EOT
)

# Validate user password
if ! dscl /Local/Default authonly "${userName1}" "${userPassword1}" ; then
    echo "Invalid user password entered"
    # Display error dialog
    /usr/bin/osascript -e 'Tell application "Self Service" to display dialog "Error enabling FileVault... Invalid user password or timeout." with title "Error" with text buttons {"OK"} default button 1 with icon caution'
    exit 1
fi


function separationLine {
echo "----------------------------------------------------------------------------------" 
}


# Enables SecureToken for the currently logged in user account.
enableSecureToken() {
separationLine
echo "Enables SecureToken for the currently logged in user account $userName1"
    sudo sysadminctl -adminUser $adminUser -adminPassword $adminPassword -secureTokenOn $userName1 -password $userPassword1
}

# Creates a PLIST containing the necessary administrator and user credentials.
createPlist() {
separationLine
echo "Creating a PLIST containing the necessary administrator and user credentials"
    echo '<?xml version="1.0" encoding="UTF-8"?>
    <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
    <plist version="1.0">
    <dict>
    <key>Username</key>
    <string>'$adminUser'</string>
    <key>Password</key>
    <string>'$adminPassword'</string>
    <key>AdditionalUsers</key>
    <array>
        <dict>
            <key>Username</key>
            <string>'$userName1'</string>
            <key>Password</key>
            <string>'$userPassword1'</string>
        </dict>
    </array>
    </dict>
    </plist>' > /private/tmp/userToAdd.plist
}

# Adds the currently logged in user to the list of FileVault enabled users.
addUser() {
separationLine
echo "Adding the currently logged in user to the list of FileVault enabled users"
    sudo fdesetup add -i < /private/tmp/userToAdd.plist
}

# Enables FileVault using a Personal Recovery Key.
enableFileVault() {
separationLine
echo "Enabling FileVault using a Personal Recovery Key"
    sudo fdesetup enable -inputplist < /private/tmp/userToAdd.plist
}

# SecureToken enabled users are automatically added to the list of Filevault enabled users when FileVault first is enabled.
# Removes the specified user(s) from the list of FileVault enabled users.
removeUser() {
separationLine
echo "Removing the specified user(s) from the list of FileVault enabled users."
    sudo fdesetup remove -user $adminUser
    sudo fdesetup remove -user $userName2
}

# Update the preboot role volume's subject directory.
updatePreboot() {
separationLine
echo "Updating preboot"
    diskutil apfs updatePreboot /
}

# Deletes the PLIST containing the administrator and user credentials.
cleanUp() {
separationLine
echo "Cleaning up temp files"
    rm /private/tmp/userToAdd.plist
}

#

enableSecureToken
createPlist
if [ "$(sudo fdesetup status | head -1)" == "FileVault is On." ]; then
separationLine
echo "Filevault is on - adding to secure token"
    addUser
else
separationLine
echo "Filevault is off - enabling. Removing user"
    enableFileVault
    #removeUser     # We do not want to remove users at this time
fi
updatePreboot
cleanUp

# Display success dialog
/usr/bin/osascript -e 'Tell application "Self Service" to display dialog "FileVault has been enabled..." with title "Success" with text buttons {"OK"} default button 1 with icon note'
# Run Jamf recon
echo "Running Jamf recon"
/usr/local/jamf/bin/jamf recon
exit 0